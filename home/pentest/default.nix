{ pkgs, ...}:
let
    username = "tokugero";
    oldPkgs = import (fetchTarball {
        url = "https://github.com/NixOS/nixpkgs/archive/refs/tags/24.11.tar.gz";
    }) { config.allowUnfree = true; };
in
{
    # Allow unfree
    # nixpkgs.config.allowUnfree = true;
    home-manager = {
        users.${username} = { pkgs, ... }: 
        {
            home = {
                packages = with pkgs; [
                    aircrack-ng
                    amass
                    apktool 
                    avalonia-ilspy
                    binwalk
                    burpsuite
                    busybox
                    chromium
                    dirb
                    dnsrecon
                    evil-winrm
                    evtx
                    exiftool
                    feroxbuster
                    ffuf
                    freeradius
                    freerdp
                    gdb
                    geckodriver
                    ghidra
                    gnupg
                    gobuster
                    hashcat
                    jadx
                    john
                    keepassxc
                    kismet
                    ligolo-ng
                    metasploit
                    mimikatz
                    nbtscan
                    net-snmp
                    netcat
                    nfs-utils
                    nikto
                    nmap
                    openldap
                    p7zip
                    proxychains
                    pwntools
                    radare2
                    rpcbind
                    rustscan
                    rustscan
                    samba4Full
                    sherlock
                    sqlcmd
                    sqlmap
                    steghide
                    tcpdump
                    thc-hydra
                    toybox
                    unzip
                    websocat
                    wireshark
                    wordlists # wordlists_path
                    wpscan
                    wsmancli
                    zap
                    commix
                    dalfox
                    ldeep
                    mitmproxy
                    villain
                    vlc
                    wfuzz
                    adalanche
                ];
            };

        };
        useGlobalPkgs = true;
    };

    environment.systemPackages = with pkgs; [
        # Nix 25.11 broke these with its upgrade to 3.13 and deprecation of the future-1.0.0 package.
        #netexec
        #smbmap
        #bloodhound-py
        #enum4linux-ng
        #kerbrute
        python312Packages.asn1crypto
        python312Packages.certipy-ad
        python312Packages.impacket
        freerdp3
        outils
        xrdp
        ]++ (with oldPkgs; [
        python312Packages.bloodyad
        adidnsdump
        netexec
        smbmap
        bloodhound-py
        enum4linux-ng
        mitm6
        kerbrute
        ]);

    programs.zsh = {
        loginShellInit = ''
            # if ~/.local/build already exists, pull - otherwise clone
            # git clone https://github.com/Tokugero/kali-build.git ~/.local/build/
            git -C ~/.local/build pull || git clone https://github.com/Tokugero/kali-build.git ~/.local/build/
        '';
        interactiveShellInit = ''
            . ~/.local/build/aliases
            . ~/.local/build/.bash_aliases
            syncsecrets = () {
                export BW_SESSION=$(bw unlock --raw);
                echo "Syncing secrets";
                bw sync;
                if [ -n "$(type -f syncuniversalsecrets)" ] ; then
                    syncuniversalsecrets;
                fi
                echo "Getting ngrok";
                mkdir -p ~/.config/ngrok; chown ${username}:${username} ~/.config/ngrok && chmod -R 0700 ~/.config/ngrok;
                bw get notes ngrok > ~/.config/ngrok/ngrok.yml;
                echo "Getting ssh keys";
                results=$(bw list items --folderid $(bw get folder cli | jq -r .id) --search "ssh_kali");
                IFS=$'\n';
                for item in $(echo $results | jq -r '.[] | .notes + " " + (.fields[] | select(.name == "path") | .value)'); do
                    content=$(echo $item | awk '{print $1}' | base64 -d);
                    location=$(eval "echo $(echo $item | awk '{print $2}')");
                    mkdir -p ~/.ssh;
                    echo $location;
                    touch $location;
                    echo $content > $location;
                    echo "Synced "$location;
                done;
                chown -R ${username}:${username} ~/.ssh && chmod -R 0700 ~/.ssh;
                bw lock;
                unset BW_SESSION;
            };
        '';
    };
}
